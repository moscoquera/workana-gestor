<?php

namespace App\Http\Controllers\Users;


use App\Http\Requests\Users\CreateProfileCrudRequest;
use App\Http\Requests\Users\UpdateProfileCrudRequest;
use Backpack\CRUD\app\Http\Controllers\CrudController;
use Backpack\CRUD\app\Http\Controllers\CrudFeatures\SaveActions;
use Backpack\CRUD\app\Http\Requests\CrudRequest;
use Backpack\CRUD\Exception\AccessDeniedException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\URL;
use Prologue\Alerts\Facades\Alert;
use Illuminate\Support\Facades\Auth;


class ProfileCrudController extends CrudController
{

    use SaveActions{
        getSaveActionButtonName as protected getSaveActionButtonNameTrait;
    }

    public function setup()
    {
        $this->crud->setModel('App\Models\User');
        $this->crud->setRoute('profile');
        $this->crud->setEntityNameStrings('perfil', 'perfil');

        $this->crud->denyAccess(['list', 'create', 'delete']);

        $this->crud->setColumns([
            [
                'label' => 'Nombres',
                'name' => 'first_name'
            ],
            [
                'label' => 'Apellidos',
                'name' => 'last_name'
            ], 'email']);

        $this->crud->addFields(
            [
                [
                    'name' => 'first_name',
                    'label' => 'Nombres',
                ],
                [
                    'name' => 'last_name',
                    'label' => 'Apellidos',
                ],
                [
                    'name' => 'email',
                    'label' => 'Email',

                ]

            ]
            , 'both');

        $this->crud->addField([
            'fake' => true,
            'name' => 'passwordchange',
            'label' => 'Cambiar contraseña',
            'type' => 'checkbox',

        ], 'update');

        $this->crud->addField([
            'name' => 'password',
            'label' => 'Contraseña',
            'type' => 'password',

        ], 'both');
        $this->crud->addField([
            'name' => 'password_confirmation',
            'fake' => true,
            'label' => 'Confirmar contraseña',
            'type' => 'password',

        ], 'both');



    }


    public function store(CreateProfileCrudRequest $request)
    {
        //no hace nada
    }


    public function update(UpdateProfileCrudRequest $request)
    {
        if ($request->input('passwordchange') == "1" && $request->input('password')) {
            $request['password'] = bcrypt($request['password']);
        } else {
            unset($request['password']);
        }

        return parent::updateCrud($request);
    }


    public function index()
    {
        try {
            return parent::index(); // TODO: Change the autogenerated stub
        } catch (AccessDeniedException $ex) {
          //  \Alert::error('No tiene permisos suficientes')->flash();
            return Redirect::to('/dashboard');
        }
    }

    public function edit($id)
    {
        if ($id && $id==Auth::user()->id){
            return parent::edit($id); // TODO: Change the autogenerated stub
        }
        return Redirect::to('/dashboard');

    }

    public function performSaveAction($itemId = null)
    {
        $saveAction = \Request::input('save_action', config('backpack.crud.default_save_action', 'save_and_back'));
        $itemId = $itemId ? $itemId : \Request::input('id');
        switch ($saveAction) {
            case 'save_and_new':
                $redirectUrl = $this->crud->route.'/create';
                break;
            case 'save_and_edit':
                $redirectUrl = $this->crud->route.'/'.$itemId.'/edit';
                if (\Request::has('locale')) {
                    $redirectUrl .= '?locale='.\Request::input('locale');
                }
                break;
            case 'save_and_back':
            default:
                $redirectUrl = URL::previous();
                break;
        }
        return \Redirect::to($redirectUrl);
    }

    public function getSaveAction(){
        $saveOptions = [];
        $saveCurrent = [
            'value' => 'save_and_edit',
            'label' => $this->getSaveActionButtonNameTrait('save_and_edit'),
        ];
        return [
            'active' => $saveCurrent,
            'options' => $saveOptions,
        ];
    }



}
