<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Backpack\CRUD\CrudTrait;
use Illuminate\Database\Eloquent\Builder;

use Backpack\Base\app\Notifications\ResetPasswordNotification as ResetPasswordNotification;
class User extends Authenticatable
{
    use Notifiable;
    use CrudTrait;

    protected $table='users';

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub


    }


    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'first_name','last_name', 'email', 'password','rol_id','username'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];



    /**
     * Send the password reset notification.
     *
     * @param  string  $token
     * @return void
     */
    public function sendPasswordResetNotification($token)
    {
        $this->notify(new ResetPasswordNotification($token));
    }

    public function rol(){
        return $this->belongsTo('App\Models\Rol');
    }

    public function isAdmin(){
        return $this->rol_id==1;
    }


    public function getFullNameAttribute(){
        return $this->first_name.' '.$this->last_name;
    }


    public function curriculum(){
       return $this->hasOne('App\Models\Curriculum','user_id');
    }

    public function accessMediasAll()
    {
        return $this->isAdmin();
    }

    public function getBirthdayAttribute(){
        $birthday=Carbon::parse($this->date_of_birth);
        $birthday->year=Carbon::now()->year;
        return $birthday->format('Y-m-d');
    }


    public function profession(){
        return $this->belongsTo('App\Models\Profession');
    }

    public function nationality(){
        return $this->belongsTo('App\Models\Country','nationality_id');
    }

    public function currentDepartment(){
        return $this->belongsTo('App\Models\Department','current_dep_id');
    }

    public function currentCity(){
        return $this->belongsTo('App\Models\City','current_city_id');
    }

    public function currentCountry(){
        return $this->belongsTo('App\Models\Country','current_country_id');
    }

    public function getGenreAttribute(){
        return $this->sex=='m'?'Masculino':'Femenino';
    }

}
