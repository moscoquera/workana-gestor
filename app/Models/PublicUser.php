<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\DB;

class PublicUser extends User
{

    protected $table='users';

    protected $fillable = [
        'first_name','last_name', 'email', 'password','rol_id','username','level_id','sex','date_of_birth',
        'nationality_id','current_address','current_dep_id','current_city_id','current_country_id','phone',
        'mobile','profession_id','leader_id','election_address','election_dep_id','election_city_id','town_id',
        'neighborhood_id','email2','mobile2','photo'
    ];

    protected $appends=[
        'fullname'
    ];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::addGlobalScope('users', function (Builder $builder) {
            $builder->where('rol_id', '=', 2 );
        });
    }


    public function crudDashboard(){
        return '<a href="'.url('users/'.$this->id).'" class="btn btn-xs btn-success"><i class="fa fa-area-chart"></i> Dashboard</a><br/>';
    }

    public function level(){
        return $this->belongsTo(Level::class);
    }

    public function attendanceToEvents(){
        return $this->morphMany(Attendance::class,'attende')->where('attendable_type',Event::class);
    }

    public function getDocumentAttribute(){
        return $thisname;
    }

    public function visits(){
        return $this->morphMany(Attendance::class,'attende')->where('attendable_type',Visit::class);

    }

    public function leader(){
        return $this->belongsTo(PublicUser::class);
    }


    public function setFirstNameAttribute($value){
        $this->attributes['first_name']=strtoupper($value);
    }

    public function getFirstNameAttribute($value)
    {
        return strtoupper($value);
    }

    public function setLastNameAttribute($value){
        $this->attributes['last_name']=strtoupper($value);
    }

    public function getLastNameAttribute($value)
    {
        return strtoupper($value);
    }

    public function setEmailAttribute($value){

        if(empty($value)){
            $this->attributes['email']=NULL;
        }else{
            $this->attributes['email']=strtolower($value);
        }

    }

    public function getEmailAttribute($value)
    {
        return strtolower($value);
    }

    public function setCurrentAddressAttribute($value){
        $this->attributes['current_address']=strtoupper($value);
    }

    public function getCurrentAddressAttribute($value)
    {
        return strtoupper($value);
    }

    public function setPhotoAttribute($value)
    {
        $attribute_name = "photo";
        $disk = "public";
        $destination_path = "uploads/curriculum_photos";

        // if the image was erased
        if ($value==null) {
            // delete the image from disk
            \Storage::disk($disk)->delete($this->photo);

            // set null in the database column
            $this->photo = null;
            $this->save();
        }

        // if a base64 was sent, store it in the db
        if (starts_with($value, 'data:image'))
        {
            // 0. Make the image
            $image = \Image::make($value);
            // 1. Generate a filename.
            $filename = md5($value.time()).'.jpg';
            // 2. Store the image on disk.
            \Storage::disk($disk)->put($destination_path.'/'.$filename, $image->stream());
            // 3. Save the path to the database
            if ($this->photo){
                \Storage::disk($disk)->delete($this->photo);
            }
            $this->attributes['photo'] = $destination_path.'/'.$filename;
            //$this->save();
        }
    }

}
